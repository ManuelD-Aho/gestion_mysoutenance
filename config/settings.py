"""
Django settings for config2 project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from dotenv import load_dotenv
from pathlib import Path

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-votre-cle-secrete-par-defaut-si-non-definie')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core.apps.CoreConfig',
]

# config/settings.py

JAZZMIN_SETTINGS = {
    "site_title": "GMS Admin",
    "site_header": "GestionMySoutenance",
    "site_brand": "GMS",
    "welcome_sign": "Bienvenue sur l'administration de GestionMySoutenance",
    "copyright": "GestionMySoutenance Ltd",
    "default_theme": "darkly",

    "show_sidebar": True,
    "navigation_expanded": True,
    "hide_apps": [],
    "hide_models": [],

    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "core.Etudiant": "fas fa-user-graduate",
        "core.Enseignant": "fas fa-chalkboard-teacher",
        "core.PersonnelAdministratif": "fas fa-user-tie",
        "core.AnneeAcademique": "fas fa-calendar-alt",
        "core.NiveauEtude": "fas fa-layer-group",
        "core.Specialite": "fas fa-star",
        "core.RapportEtudiant": "fas fa-file-alt",
        "core.SessionValidation": "fas fa-gavel",
        "core.Inscription": "fas fa-id-card",
        "core.Stage": "fas fa-building",
        "core.Penalite": "fas fa-exclamation-triangle",
        "core.CritereConformite": "fas fa-check-double",
        "core.Ue": "fas fa-book",
        "core.Ecue": "fas fa-book-open",
        "core.Entreprise": "fas fa-industry",
        "core.Grade": "fas fa-award",
        "core.Fonction": "fas fa-briefcase",
        "core.GradeEnseignant": "fas fa-certificate",
        "core.FonctionEnseignant": "fas fa-user-tag",
        "core.ProcesVerbal": "fas fa-scroll",
        "core.VoteCommission": "fas fa-vote-yea",
        "core.ValidationPv": "fas fa-check-circle",
        "core.Sequence": "fas fa-hashtag",
        "core.Notification": "fas fa-bell",
        "core.Reclamation": "fas fa-headset",
        "core.Delegation": "fas fa-user-friends",
        "core.DocumentOfficiel": "fas fa-file-pdf",
        "core.Note": "fas fa-clipboard-list",
    },

    "order_with_respect_to": [
        "auth",
        "core.Etudiant",
        "core.Enseignant",
        "core.PersonnelAdministratif",
        "core.Delegation", # Nouveau
        "core.Notification", # Nouveau
        "core.Reclamation", # Nouveau

        "core.AnneeAcademique",
        "core.NiveauEtude",
        "core.Specialite",
        "core.Ue",
        "core.Ecue",
        "core.Entreprise",

        "core.RapportEtudiant",
        "core.SectionRapport", # Nouveau
        "core.ConformiteRapportDetail", # Nouveau
        "core.SessionValidation",
        "core.VoteCommission", # Nouveau
        "core.ProcesVerbal",
        "core.ValidationPv", # Nouveau

        "core.Inscription",
        "core.Stage",
        "core.Penalite",
        "core.Note", # Nouveau
        "core.DocumentOfficiel", # Nouveau

        "core.CritereConformite",
        "core.Grade",
        "core.Fonction",
        "core.GradeEnseignant", # Nouveau
        "core.FonctionEnseignant", # Nouveau
        "core.Sequence", # Nouveau
    ],

    "custom_links": {
        "core": [{
            "name": "Faire un lien",
            "url": "make_messages",
            "icon": "fas fa-comments",
            "permissions": ["auth.view_user"]
        }]
    }
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-dark",
    "accent": "accent-primary",
    "navbar": "navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "darkly",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr' # Changé en français
TIME_ZONE = 'UTC' # Gardons UTC pour la cohérence des dates en DB

USE_I18N = True
USE_L10N = True # Pour les formats de date/heure localisés
USE_TZ = True # Indispensable pour la gestion des fuseaux horaires avec timezone.make_aware()

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles' # Pour la collecte des fichiers statiques en production


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Custom Settings for GestionMySoutenance (can be moved to a separate model for dynamic management)
MAX_LOGIN_ATTEMPTS = 5
LOCKOUT_TIME_MINUTES = 30
PASSWORD_MIN_LENGTH = 8
TOKEN_VALIDITY_HOURS = 24 # Durée de validité des jetons (email validation, password reset)
PENALTY_GRACE_PERIOD_YEARS = 2 # Années de dépassement avant pénalité
PENALTY_AMOUNT_PER_YEAR = 50000 # Montant de la pénalité financière

# Email Configuration (for notifications)
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend') # Utilise la console en dev
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@gestionmysoutenance.com')
SERVER_EMAIL = DEFAULT_FROM_EMAIL # Pour les emails d'erreur

# Session Configuration (for real-time RBAC updates)
# Remplacer le gestionnaire de session par défaut par un gestionnaire de base de données
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_SAVE_EVERY_REQUEST = True # Sauvegarde la session à chaque requête pour s'assurer que les changements sont persistés
SESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session persiste après la fermeture du navigateur
SESSION_COOKIE_AGE = 1209600 # 2 semaines en secondes (valeur par défaut de Django)

# File Storage (for generated PDFs)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' # Répertoire où les fichiers uploadés/générés seront stockés

# Logging (for audit and error logs)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file_audit': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'audit.log',
            'formatter': 'verbose'
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'error.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'audit_logger': { # Logger spécifique pour les actions d'audit
            'handlers': ['file_audit'],
            'level': 'INFO',
            'propagate': False,
        },
        'error_logger': { # Logger spécifique pour les erreurs applicatives
            'handlers': ['file_error'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}

# Pour les tâches asynchrones (ex: Celery) - Configuration minimale
# BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
# CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'UTC'